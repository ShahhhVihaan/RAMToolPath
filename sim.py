from path import Planner
import tkinter as tk

class App(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

        # Initialize a Planner object with a G-code file path
        self.planner = Planner('sample_gcode/setup.gcode')

        # Initialize the starting coordinates
        self.start_x, self.start_y = 0, 0
        self.scale_factor = 7  # Scale up by a factor of 100


    def create_widgets(self):
        # Create a canvas to display the trace line
        self.canvas = tk.Canvas(self, width=800, height=800)
        self.canvas.pack()

        # Create a button to start displaying the trace line
        self.start_button = tk.Button(self, text="Start", command=self.start_trace)
        self.start_button.pack(side="left")

        # Create a button to stop displaying the trace line
        self.stop_button = tk.Button(self, text="Stop", command=self.stop_trace)
        self.stop_button.pack(side="left")

    def start_trace(self):
        # Loop through the coordinates generated by the generate() method
        for coord in self.planner.generate():
            # Get the x and y coordinates
            x, y = coord

            # Draw a line from the previous coordinates to the new coordinates
            self.canvas.create_line(self.start_x, self.start_y, x, y)

            # Update the starting coordinates
            self.start_x, self.start_y = x, y

            # Update the canvas to show the new trace line
            self.canvas.update()

    def start_trace(self):
        # Loop through the coordinates generated by the generate() method
        for coord in self.planner.generate():
            # Get the x and y coordinates
            x, y = coord

            # Scale up the coordinates by the scaling factor
            x *= self.scale_factor
            y *= self.scale_factor

            # Draw a line from the previous coordinates to the new coordinates
            self.canvas.create_line(self.start_x, self.start_y, x, y)

            # Update the starting coordinates
            self.start_x, self.start_y = x, y

            # Update the canvas to show the new trace line
            self.canvas.update()
    
    def stop_trace(self):
            # Clear the canvas to stop displaying the trace line
        self.canvas.delete("all")

# Create the main window
root = tk.Tk()
root.geometry("1000x1000")
# Create the app
app = App(master=root)

# Start the app
app.mainloop()
